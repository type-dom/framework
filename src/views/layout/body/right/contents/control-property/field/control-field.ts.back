import { IOptionConfig } from '../../../../../../core/controls/web-control.interface';
import { PropertySelect } from '../../property-item/select/property-select';
import { ControlProperty } from '../control-property';

// 控件字段属性
export class ControlFieldProperty extends PropertySelect {
  className: 'ControlFieldProperty';

  constructor(public parent: ControlProperty) {
    super('控件字段');
    this.className = 'ControlFieldProperty';
    this.addAttribute('name', 'control-field');
  }
  // todo 应该与选中的控件关联
  // get optionConfig(): IOptionConfig {
  //   // if (this.editor.webDocument?.attrObj['option-config']) {
  //   return JSON.parse(this.editor.webDocument.attrObj['option-config'] as string);
  //   // }
  //   // return undefined;
  // }
  // set optionConfig(value: IOptionConfig) {
  //   this.editor.webDocument.setAttribute('option-config', JSON.stringify(value));
  // }
  get fieldConfig(): IOptionConfig | undefined {
    const fieldConfig = this.editor.webDocument.attrObj['field-config'];
    if (fieldConfig) {
      return JSON.parse(this.editor.webDocument.attrObj['field-config'] as string);
    }
    return undefined;
  }
  set fieldConfig(value: IOptionConfig | undefined) {
    this.editor.webDocument.setAttribute('field-config', JSON.stringify(value));
  }
  get fieldName(): string {
    return this.editor?.selectedControl?.attrObj['field-name'] as string;
  }
  set fieldName(value: string) {
    this.editor.selectedControl?.setAttribute('field-name', value);
  }
  reset(value?: string): void {
    console.log('value is ', value);
    if (this.select.childNodes.length === 0) {
      if (this.fieldConfig) {
        this.select.resetConfig(this.fieldConfig);
      }
    }
    if (value) {
      this.fieldName = value;
      return;
    }
    if (this.styleObj.display === 'none') this.setStyle('display', 'block');

    //  选中表格控件时，该属性控制隐藏了。
    // if (this.editor.selectedControl?.itemContent instanceof Table) {
    //   // this.setStyle('display', 'none');
    // }

    if (this.fieldName !== undefined) {
      if (this.fieldConfig) {
        this.fieldConfig = Object.assign(this.fieldConfig, { resultValue: this.fieldName });
        console.log('this.fieldConfig is ', this.fieldConfig);
        // if (!this.editor.selectedControl) throw Error('请先选中某个控件');
        // this.resetFieldConfig(this.editor.selectedControl, this.fieldConfig);
        this.select.resetConfig(this.fieldConfig);
      } else {
        console.error('this.fieldConfig is undefined . ');
        // throw Error('this.fieldConfig is undefined . ');
      }
    } else {
      // 初次加载时，该控件字段名就是没有的。预置位默认还是不做处理？ TODO
      console.error('this.fieldName is undefined . ');
      if (this.fieldConfig) {
        this.fieldConfig = Object.assign(this.fieldConfig, { resultValue: 0 });
        console.log('this.fieldConfig is ', this.fieldConfig);
        // if (!this.editor.selectedControl) throw Error('请先选中某个控件');
        // this.resetFieldConfig(this.editor.selectedControl, this.fieldConfig);
        this.select.resetConfig(this.fieldConfig);
      } else {
        console.error('this.fieldConfig is undefined . ');
        // throw Error('this.fieldConfig is undefined . ');
      }
    }
  }
  resetFieldConfig(fieldConfig: IOptionConfig): void {
    this.fieldConfig = fieldConfig;
    this.select.resetConfig(fieldConfig);
  }
  // initEvents(): void {
  //   super.initEvents();
  // }
}
